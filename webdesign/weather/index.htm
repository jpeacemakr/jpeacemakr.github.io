<!DOCTYPE html>
<html>
  <head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Dolly's Doggo Weather Forecast</title>
    <link href="css/style.css" rel="stylesheet">

    <style>
      #weatheralerts {
        display:none;
        background-color: rgb(255, 204, 138);
        margin:10px;
        padding:10px;
      }
      #location {
        background-color: rgb(255, 204, 138);
        margin:10px;
        padding:10px;
      }
      #todayforecast {
        background-color: rgb(255, 204, 138);
        margin:10px;
        padding:10px;
      }
      #dollysays {
        background-color: rgb(255, 204, 138);
        margin:10px;
        padding:10px;
      }
      #dailyforecast {
        background-color: rgb(255, 204, 138);
        margin:10px;
        padding:10px;
      }
      #hourlyforecast {
        background-color: rgb(255, 204, 138);
        margin:10px;
        padding:10px;
      }
      #footer {
        background-color: rgb(255, 204, 138);
        margin:10px;
        padding:10px;
      }
      

      .today {
        background-color: #fffc67;
        margin: 10px 0px 20px 0px;
        padding: 30px;
      }

      .circle {
        background-color: #fffc67;
        width: 100px;
        height: 100px;
        border-radius: 50%;
        text-align: center;
        padding-top:24px; 
        margin: 20px auto 30px auto;
      }
      .daily {
        background-color: antiquewhite;
        margin:10px;
        padding:20px;
      }
      .hourly{
        background-color: antiquewhite;
        margin:10px;
        padding:10px;
      }
      h2 {
        font-family: 'Rokkitt', serif;
        font-size: 48px;
        color: rgb(255, 123, 0);
      }
      body {
        background-color: #c14b2b;
      }

    </style>

  </head>



  <body onload="getLocation()">
    <div id="header">
      <h1>Dolly's doggo weather forecast</h1>
    </div>
    <div id="weatheralerts"></div>
    <div id="location"></div>
    <div id="todayforecast" class="row"></div>
    <div id="dollysays" class="row"></div>
    <div id="dailyforecast" class="row"></div>
    <div id="hourlyforecast"></div>
    <div id="footer">
      <p>2022 Peacemaker Media Empire</p>
    </div>

  </body>



  <script>
    // using https://www.weather.gov/documentation/services-web-api
    /*
    How do I get the forecast?
    Forecasts are divided into 2.5km grids. Each NWS office is responsible for a section of the grid. The API endpoint for the forecast at a specific grid is:
    https://api.weather.gov/gridpoints/{office}/{grid X},{grid Y}/forecast
    For example: https://api.weather.gov/gridpoints/TOP/31,80/forecast
    If you do not know the grid that correlates to your location, you can use the /points endpoint to retrieve the exact grid endpoint by coordinates:
    https://api.weather.gov/points/{latitude},{longitude}
    For example: https://api.weather.gov/points/39.7456,-97.0892
    This will return the grid endpoint in the "forecast" property. Applications may cache the grid for a location to improve latency and reduce the additional lookup request. This endpoint also tells the application where to find information for issuing office, observation stations, and zones.
    How do I get alerts?
    The API has a robust selection of filters for alerts. A common request is all active alerts for a state:
    https://api.weather.gov/alerts/active?area={state}
    For example: https://api.weather.gov/alerts/active?area=KS
    */

    var myLongitude;
    var myLatitude;
    var positionResult;
    var weatherResult;
    var weatherResultHourly;



    // use weather information to get what dolly says
    function dollySays() {
      
      var dollySaysText = document.getElementById("dollysays");
      var dollyWords = "Bark, World!";
      
      // if rain

      // if thunderstorms

      // if snow

      // if cold

  

      // if hot

      // if windy

      // if date is holiday

      dollySaysText.innerHTML = `<p>${dollyWords}</p>`;
    }




    // get longitude and latitude from browser
    function getLocation() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(getWeatherPosition); //takes showPosition as callback function and returns position
      } else {
        document.getElementById("location").innerHTML = "Geolocation is not supported by this browser.";
      }
    }



    
    // look up weather zone and grid position within the zone. also city and state.
    function getWeatherPosition(position) {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          positionResult = JSON.parse(this.responseText);
          
          document.getElementById("location").innerHTML = 
            "<p>Location: " + positionResult.properties.relativeLocation.properties.city + ", " + 
            positionResult.properties.relativeLocation.properties.state +
            " (Longitude: " + position.coords.longitude + 
            ", Latitude: " + position.coords.latitude +
            ")</p>"           
          ;
         
          getWeather(positionResult.properties.gridId, positionResult.properties.gridX, positionResult.properties.gridY);
          getWeatherHourly(positionResult.properties.gridId, positionResult.properties.gridX, positionResult.properties.gridY);
          dollySays();
        }
      };
      xhttp.open("GET", "https://api.weather.gov/points/" + position.coords.latitude + "," + position.coords.longitude, true);
      xhttp.send();
    }




    // get and display daily weather report
    function getWeather(office, x, y) {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          weatherResult = JSON.parse(this.responseText);         
          console.log(weatherResult);

          // print today's forecast into the div with thetodayforecast id
          var todayForecastText = document.getElementById("todayforecast");
          // breakout the first day. if already passed noon, need to  make first day just tonight
          var dayStart = 0;
          if (weatherResult.properties.periods[0].name == "Tonight") {
            todayForecastText.insertAdjacentHTML("beforeend", `
              <div class='today col-xl-12'>
                <h2> ${weatherResult.properties.periods[0].name}</h3> 
                <p><b>Forecast:</b> ${weatherResult.properties.periods[0].shortForecast}, 
                <b>Temperature:</b> ${weatherResult.properties.periods[0].temperature}, 
                <b>Wind:</b> ${weatherResult.properties.periods[0].windSpeed} ${weatherResult.properties.periods[0].windDirection}
                <br> ${weatherResult.properties.periods[0].detailedForecast}</p>
              </div>
            `);
            dayStart = 1;
          } else if (weatherResult.properties.periods[0].name == "Today" || weatherResult.properties.periods[0].name == "This Afternoon") {
            todayForecastText.insertAdjacentHTML("beforeend", `
              <div class='today col-xl-12'>
                <h2> ${weatherResult.properties.periods[0].name}</h3> 
                <p><b>Forecast:</b> ${weatherResult.properties.periods[0].shortForecast}, 
                <b>Temperature:</b> ${weatherResult.properties.periods[0].temperature}, 
                <b>Wind:</b> ${weatherResult.properties.periods[0].windSpeed} ${weatherResult.properties.periods[0].windDirection}
                <br> ${weatherResult.properties.periods[0].detailedForecast}</p>
                <h2> ${weatherResult.properties.periods[1].name}</h2> 
                <p><b>Forecast:</b> ${weatherResult.properties.periods[1].shortForecast}, 
                <b>Temperature:</b> ${weatherResult.properties.periods[1].temperature}, 
                <b>Wind:</b> ${weatherResult.properties.periods[1].windSpeed} ${weatherResult.properties.periods[0].windDirection}
                <br> ${weatherResult.properties.periods[1].detailedForecast}</p>
              </div>
            `);
            dayStart = 2;
          }

          // print the rest of the daily forecast into the div with the dailyforecast id
          var dailyForecastText = document.getElementById("dailyforecast");
          dailyForecastText.innerHTML = "<h2 class='rokkitt'>The rest of the week</h2>";

          var currentDayAbbreviation;
          var currentDayArray;
              
          for (i=dayStart; i < weatherResult.properties.periods.length; i=i+2) {          
            
              // create abbreviation of the day of the week
              currentDayAbbreviation = "";
              //if current day has a space (is a special holiday), get first letter then each letter after the space
              if (weatherResult.properties.periods[i].name.includes(" ")){
                currentDayArray = weatherResult.properties.periods[i].name.split(" ");
                function getFirstLetters(item) {
                  currentDayAbbreviation = currentDayAbbreviation + item.slice(0, 1);
                }
                currentDayArray.forEach(getFirstLetters);
              }
              // else just use the first two letters of the day of the week
              else{
                currentDayAbbreviation = weatherResult.properties.periods[i].name.slice(0, 2);
              }

            // if day has a morning and evening
            if (i+1 < weatherResult.properties.periods.length) {

              dailyForecastText.insertAdjacentHTML("beforeend", `
                <div class='daily col-xl'>
                  <div class="circle">
                    <h2> ${currentDayAbbreviation}</h2>
                  </div> 
                  <h3> ${weatherResult.properties.periods[i].name}</h3> 
                  <p><b>Forecast:</b> ${weatherResult.properties.periods[i].shortForecast}, 
                  <b>Temperature:</b> ${weatherResult.properties.periods[i].temperature}, 
                  <b>Wind:</b> ${weatherResult.properties.periods[i].windSpeed} ${weatherResult.properties.periods[i].windDirection}
                  <br> ${weatherResult.properties.periods[i].detailedForecast}</p>
                  
                  <h3> ${weatherResult.properties.periods[i+1].name}</h3> 
                  <p><b>Forecast:</b> ${weatherResult.properties.periods[i+1].shortForecast}, 
                  <b>Temperature:</b> ${weatherResult.properties.periods[i+1].temperature}, 
                  <b>Wind:</b> ${weatherResult.properties.periods[i+1].windSpeed} ${weatherResult.properties.periods[i].windDirection}
                  <br> ${weatherResult.properties.periods[i+1].detailedForecast}</p>
                </div>
              `);

            // else print half day at the end
            } else {
              dailyForecastText.insertAdjacentHTML("beforeend", `
                <div class='daily col-xl'>
                  <div class="circle">
                    <h2> ${currentDayAbbreviation}</h2>
                  </div> 
                  <h3> ${weatherResult.properties.periods[i].name}</h3> 
                  <p><b>Forecast:</b> ${weatherResult.properties.periods[i].shortForecast}, 
                  <b>Temperature:</b> ${weatherResult.properties.periods[i].temperature}, 
                  <b>Wind:</b> ${weatherResult.properties.periods[i].windSpeed} ${weatherResult.properties.periods[i].windDirection}
                  <br> ${weatherResult.properties.periods[i].detailedForecast}</p>
                </div>
              `);
            }
          }
        }
      };
      xhttp.open("GET", "https://api.weather.gov/gridpoints/" + office +"/" + x + "," + y + "/forecast", true);
      xhttp.send();
    }





    // get and display hourly weather report
    function getWeatherHourly(office, x, y) {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          weatherResultHourly = JSON.parse(this.responseText);
          console.log(weatherResultHourly);

          // print the hourly forecast into the div with the hourlyforecast id
          var hourlyForecastText = document.getElementById("hourlyforecast");
          hourlyForecastText.innerHTML = "<h2>Hour-by-hour forecast</h2>";
          
          // used to format date. used to convert number into string
          const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
          const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];


          for (i=0; i <weatherResultHourly.properties.periods.length; i++) {
            
            // convert string from json into a proper date
            var startTime = new Date(weatherResultHourly.properties.periods[i].startTime);
            
            // if first loop, create initial div and header
            if (i==0) {
              hourlyForecastText.insertAdjacentHTML("beforeend", `
              <div class='hourly'>  
                <h3>${days[startTime.getDay()]}, ${months[startTime.getMonth()]} ${startTime.getDate()}, ${startTime.getFullYear()}</h3>
              </div>
              `);
            }

            // create new div and header if the start of a new day
            if (startTime.getHours()==0 && i!==0) {
              hourlyForecastText.insertAdjacentHTML("beforeend", `
                <div class='hourly'>  
                  <h3>${days[startTime.getDay()]}, ${months[startTime.getMonth()]} ${startTime.getDate()}, ${startTime.getFullYear()}</h3>
                </div>
              `);
            }

            // insert text into most recent date's div
            // print formatted time
            if (startTime.getHours()==0) {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
                Time: Midnight 
              `);
            } else if (startTime.getHours() < 12)  {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
                Time: ${startTime.getHours()} a.m. 
              `);
            } else if (startTime.getHours() == 12) {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
                Time: Noon 
              `);
            } else {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
                Time: ${startTime.getHours()-12} p.m. 
              `);
            }

            // print day or night  
            if (weatherResultHourly.properties.periods[i].isDaytime) {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `(day) `);
            } else {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `(night) `);
            }
            
            // print forecast, temperature and wind
            hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
              <b>Forecast:</b> ${weatherResultHourly.properties.periods[i].shortForecast}, 
              <b>Temperature:</b> ${weatherResultHourly.properties.periods[i].temperature}, 
              <b>Wind:</b> ${weatherResultHourly.properties.periods[i].windSpeed} ${weatherResultHourly.properties.periods[i].windDirection} <br>
            `);

          }
        }
      };
      xhttp.open("GET", "https://api.weather.gov/gridpoints/" + office +"/" + x + "," + y + "/forecast/hourly", true);
      xhttp.send();
    }


    
  </script>

</html>
