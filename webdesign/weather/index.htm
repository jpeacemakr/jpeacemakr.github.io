<!DOCTYPE html>
<html>
  <head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Dolly the Doggo's Weather Forecast</title>
    <link href="css/style.css" rel="stylesheet">

    <style>
      #header {
        background-color: #c14b2b;
        padding:12px 10px 1px 15px;
        margin:0px 0px 0px 0px;
        transition: all 1s;
      }
      #headerhead {
        color: white;
        font-size: 40px;
        font-family: 'Rokkitt', sans-serif;
        margin:0px 0px -2px 0px;
      }
      #weatheralerts {
        display: none;
        color:#ffffff;
        background-color: rgb(255, 123, 0);
        padding: 20px;
        margin:0px;
      }
      #location {
        margin:0px 0px 0px 0px;
      }
      #todayforecast {
        padding:50px;
      }
      #mainimage {
        width:100%;
        position:fixed;
        z-index: -1;
        top:-50px;
      }
      #dailyforecast {
        margin: 0px 0px 300px 0px;
        padding: 40px 30px;
      }
      #hourlyforecast {
        background-color: rgb(255, 204, 138);
        margin: 50px;
        padding: 20px 20px 5px 20px;
        border-radius: 10px;
      }
      #footer {
        background-color: #c14b2b;
        margin: 0px;
        padding: 20px;
      }
      

      .today {
        background-color: #fffc67;
        padding: 30px 30px 15px 30px;
        border-radius: 10px;
        margin: 10px;
      }

      .circle {
        background-color: #fffc67;
        width: 80px;
        height: 80px;
        border-radius: 50%;
        text-align: center;
        padding-top:16px; 
        margin: 10px auto -45px auto;
        cursor: pointer;
        font-family: 'Rokkitt', sans-serif;
        font-size: 36px;
        font-weight:bold;
        color: rgb(255, 123, 0);
        position: relative;
        top:-50px;
      }
      .circle:hover {
        background-color: #ffffff;
      }

      .daily {
        background-color: rgba(255,255,255, 0.7);
        margin: 40px 10px 10px 10px;
        padding:10px 20px 1px 20px;
        border-radius: 10px;
        font-size: 14px;
        height:fit-content;
      }


      .dollysays {
        /*background-color: rgb(255, 204, 138);
        margin:10px;
        padding:10px;*/
      }

      .hourly{
        background-color: antiquewhite;
        margin:20px 0px;
        padding:20px;
      }

      a {
        color: rgb(0, 0, 0);
      }
      h2 {
        font-family: 'Rokkitt', sans-serif;
        font-size: 30px;
        color: rgb(255, 123, 0);
      }
      body {
        background-color: #c14b2b;
      }

    </style>

  </head>



  <body onload="getLocation()" onscroll="hideHeader()">
    <img id="mainimage" src="images/corner.jpg">

    <div id="header" class="sticky-top">
      <h1 id="headerhead">Dolly the Doggo's Weather Forecast</h1>
      <div id="location"></div>
    </div>

    <div id="weatheralerts"></div>

    <div class="container-fluid">
      <div id="dailyforecast" class="row">
      </div>
    </div>
    
    <div id="hourlyforecast"></div>

    <div id="footer">
      <p>Copyright 2022 Peacemaker Media Empire. Weather data from <a href ="https://www.weather.gov/documentation/services-web-api">National Weather Service API</a>. If the information on this page is bad, don't blame us. You are the one who got your weather from a dog.</p>
    </div>

  </body>



  <script>
    // using https://www.weather.gov/documentation/services-web-api
    /*
    How do I get the forecast?
    Forecasts are divided into 2.5km grids. Each NWS office is responsible for a section of the grid. The API endpoint for the forecast at a specific grid is:
    https://api.weather.gov/gridpoints/{office}/{grid X},{grid Y}/forecast
    For example: https://api.weather.gov/gridpoints/TOP/31,80/forecast
    If you do not know the grid that correlates to your location, you can use the /points endpoint to retrieve the exact grid endpoint by coordinates:
    https://api.weather.gov/points/{latitude},{longitude}
    For example: https://api.weather.gov/points/39.7456,-97.0892
    This will return the grid endpoint in the "forecast" property. Applications may cache the grid for a location to improve latency and reduce the additional lookup request. This endpoint also tells the application where to find information for issuing office, observation stations, and zones.
    How do I get alerts?
    The API has a robust selection of filters for alerts. A common request is all active alerts for a state:
    https://api.weather.gov/alerts/active?area={state}
    For example: https://api.weather.gov/alerts/active?area=KS
    */

    var myLongitude;
    var myLatitude;
    var positionResult;
    var weatherResult;
    var weatherResultHourly;
    var weatherResultArray = [];
    var weatherAbbreviationArray = [];

    



    // use weather information to get what dolly says
    function dollySays() {
      
      var dollyWords = "Bark, World!";
      
      // terms
      /*
      rain = sky drips
      thunderstorms = sky booms
      snow = 
      showers = 
      precipitation = wets
      windy = 
      cloudy = sky fluffs
      thunderstorms = angry sky fluffs
      clear = no sky fluffs

      */



      // check the season?

      // if day
      // it would be good day for chesseburger party in the backyard.

      // if night
      // It would be good night to chase opossums! 
      // It would be good night to chase opossums! 
      // It would be good night to chase opossums! 
      // It would be good night to chase opossums! 

      // if rain
      // I brings in the mud
      // good day for couch cuddles
      // bath time is outside now

      // if thunderstorms
      // Oh no! I will get scared by sky booms!

      // if snow
      // Good time for couch snuggles.

      // if cold
      // I need my extra fur today.
  

      // if hot
      // don't let my paws get burned on the walks.
      // can I has trip to the pool too?
      // would be good day for ice creams?

      // if windy
      // I must be careful with the pees

      // if date is holiday


      /* things to use
      weatherResult.properties.periods[i].name 
      weatherResult.properties.periods[i].shortForecast 
      weatherResult.properties.periods[i].temperature 
      weatherResult.properties.periods[i].windSpeed
      weatherResult.properties.periods[i].windDirection
      weatherResult.properties.periods[i].detailedForecast

      weatherResult.properties.periods[i+1].name 
      weatherResult.properties.periods[i+1].shortForecast 
      weatherResult.properties.periods[i+1].temperature 
      weatherResult.properties.periods[i+1].windSpeed
      weatherResult.properties.periods[i].windDirection
      weatherResult.properties.periods[i+1].detailedForecast
      */

      return dollyWords;
    }




    // get longitude and latitude from browser
    function getLocation() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(getWeatherPosition); //takes showPosition as callback function and returns position
      } else {
        document.getElementById("location").innerHTML = "Geolocation is not supported by this browser.";
      }
    }



    
    // look up weather zone and grid position within the zone. also city and state.
    function getWeatherPosition(position) {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          positionResult = JSON.parse(this.responseText);
          
          document.getElementById("location").innerHTML = 
            "<p>Location: <b>" + positionResult.properties.relativeLocation.properties.city + ", " + 
            positionResult.properties.relativeLocation.properties.state +
            "</b> (Longitude: " + position.coords.longitude + 
            ", Latitude: " + position.coords.latitude +
            ")</p>"           
          ;
          
          loadWeather(positionResult.properties.gridId, positionResult.properties.gridX, positionResult.properties.gridY);
          //getWeather(positionResult.properties.gridId, positionResult.properties.gridX, positionResult.properties.gridY);
          getWeatherHourly(positionResult.properties.gridId, positionResult.properties.gridX, positionResult.properties.gridY);
        }
      };
      xhttp.open("GET", "https://api.weather.gov/points/" + position.coords.latitude + "," + position.coords.longitude, true);
      xhttp.send();
    }




    // get and display daily weather report
    function loadWeather(office, x, y) {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          weatherResult = JSON.parse(this.responseText);         
          console.log(weatherResult);

          // store today's forecast into the array
          // if already passed noon, need to  make first day just tonight
          var dayStart = 0;
          if (weatherResult.properties.periods[0].name == "Tonight" || weatherResult.properties.periods[0].name == "Overnight") {
            
            weatherResultArray.push (`
              <div id="full0" class="today col-xl-3 col-lg-5">
                <h2> ${weatherResult.properties.periods[0].name}</h2> 
                <p><b>Forecast:</b> ${weatherResult.properties.periods[0].shortForecast}, 
                <b>Temperature:</b> ${weatherResult.properties.periods[0].temperature}, 
                <b>Wind:</b> ${weatherResult.properties.periods[0].windSpeed} ${weatherResult.properties.periods[0].windDirection}
                <br> ${weatherResult.properties.periods[0].detailedForecast}</p>

                <div class="dollysays">
                  <h2>Dolly says</h2> 
                  <p>${dollySays(0, 1)}</p>
                </div>

                <p><a href="#hourly${weatherResultArray.length}">Hour-by-hour forecast</a></p>
              </div>
            `);

            weatherAbbreviationArray.push (`
                <div id="abbreviated0" class='daily col' onclick="changeForecast(0, this);">
                  <div class="circle">
                    Now
                  </div> 
                  <p><b> ${weatherResult.properties.periods[0].name}</b> 
                  <br> ${weatherResult.properties.periods[0].shortForecast}, 
                  ${weatherResult.properties.periods[0].temperature}F</p> 
                </div>
            `);
            dayStart = 1;
          }

          var currentDayAbbreviation;
          var currentDayArray;
          
          //add rest of the days into the array
          for (i=dayStart; i < weatherResult.properties.periods.length; i=i+2) {          
            // if day has a morning and evening
            if (i+1 < weatherResult.properties.periods.length) {


              // create abbreviation of the day of the week
              currentDayAbbreviation = "";
              if (weatherResult.properties.periods[i].name == "Today" || weatherResult.properties.periods[i].name == "This Afternoon") {
                currentDayAbbreviation ="Now";
              }
              //if current day has a space (is a special holiday), get first letter then each letter after the space
              else if (weatherResult.properties.periods[i].name.includes(" ")){
                currentDayArray = weatherResult.properties.periods[i].name.split(" ");
                function getFirstLetters(item) {
                  currentDayAbbreviation = currentDayAbbreviation + item.slice(0, 1);
                }
                currentDayArray.forEach(getFirstLetters);
              }
              // else just use the first two letters of the day of the week
              else{
                currentDayAbbreviation = weatherResult.properties.periods[i].name.slice(0, 2);
              }
                           
              // add full day to weather results array
              weatherResultArray.push (`
                <div id="full${weatherResultArray.length}" class="today col-xl-3 col-lg-5">
                  <h2> ${weatherResult.properties.periods[i].name}</h2> 
                  <p><b>Forecast:</b> ${weatherResult.properties.periods[i].shortForecast}, 
                  <b>Temperature:</b> ${weatherResult.properties.periods[i].temperature}, 
                  <b>Wind:</b> ${weatherResult.properties.periods[i].windSpeed} ${weatherResult.properties.periods[i].windDirection}
                  <br> ${weatherResult.properties.periods[i].detailedForecast}</p>

                  <h2> ${weatherResult.properties.periods[i+1].name}</h2> 
                  <p><b>Forecast:</b> ${weatherResult.properties.periods[i+1].shortForecast}, 
                  <b>Temperature:</b> ${weatherResult.properties.periods[i+1].temperature}, 
                  <b>Wind:</b> ${weatherResult.properties.periods[i+1].windSpeed} ${weatherResult.properties.periods[i].windDirection}
                  <br> ${weatherResult.properties.periods[i+1].detailedForecast}</p>

                  <div class="dollysays">
                    <h2>Dolly says</h2> 
                    <p>${dollySays(i, 2)}</p>
                  </div>

                  <p><a href="#hourly${weatherResultArray.length}">Hour-by-hour forecast</a></p>

                </div>
              `);
              
              // add full day to weather abbreviations array
              weatherAbbreviationArray.push (`
                <div id="abbreviated${weatherAbbreviationArray.length}" class='daily col' onclick="changeForecast(${weatherResultArray.length-1}, this);">
                  <div class="circle">
                    ${currentDayAbbreviation}
                  </div> 
                  <p><b> ${weatherResult.properties.periods[i].name}</b> 
                  <br> ${weatherResult.properties.periods[i].shortForecast}, 
                  ${weatherResult.properties.periods[i].temperature}F, 
                  ${weatherResult.properties.periods[i+1].temperature}F</p> 
                </div>
              `);


            // else add half day to weather results array
            } else {
              weatherResultArray.push (`
                <div id="full${weatherResultArray.length}" class="today col-xl-3 col-lg-5">
                  <h2> ${weatherResult.properties.periods[i].name}</h2> 
                  <p><b>Forecast:</b> ${weatherResult.properties.periods[i].shortForecast}, 
                  <b>Temperature:</b> ${weatherResult.properties.periods[i].temperature}, 
                  <b>Wind:</b> ${weatherResult.properties.periods[i].windSpeed} ${weatherResult.properties.periods[i].windDirection}
                  <br> ${weatherResult.properties.periods[i].detailedForecast}</p>

                  <div class="dollysays">
                    <h2>Dolly says</h2> 
                    <p>${dollySays(i, 1)}</p>
                  </div>

                  <p><a href="#hourly${weatherResultArray.length}">Hour-by-hour forecast</a></p>

                </div>
              `);

              weatherAbbreviationArray.push (`
                <div id="abbreviated${weatherAbbreviationArray.length}" class='daily col' onclick="changeForecast(${weatherResultArray.length-1}, this);">
                  <div class="circle">
                    ${currentDayAbbreviation}
                  </div> 
                  <p><b> ${weatherResult.properties.periods[i].name}</b> 
                  <br> ${weatherResult.properties.periods[i].shortForecast}, 
                  ${weatherResult.properties.periods[i].temperature}F</p> 
                </div>
              `);

            }
          }
      
          // log to console for debugging
          /* for (i=0; i < weatherResultArray.length; i++) {
            console.log(weatherAbbreviationArray[i]);
            console.log(weatherResultArray[i]);
          }*/
        
          // print today's forecast into the div with the today id
          var dailyForecastText = document.getElementById("dailyforecast");
          dailyForecastText.insertAdjacentHTML("beforeend", weatherResultArray[0]);           

          // print the rest of the daily forecast into the div with the dailyforecast id
          for (i=1; i < weatherResultArray.length; i++) {          
              dailyForecastText.insertAdjacentHTML("beforeend", weatherAbbreviationArray[i]);           
          }
        }
      
      };
      xhttp.open("GET", "https://api.weather.gov/gridpoints/" + office +"/" + x + "," + y + "/forecast", true);
      xhttp.send();
    }



    // swap expanded and abbreviated forecasts
    function changeForecast(dayNumber, thisElement) {
      // convert expanded day to abbreviated day
      var temp = document.createElement("div");
      var todayNumber = document.getElementsByClassName("today")[0].id.charAt(4); //gets number from id full0 ... full8
      temp.innerHTML = weatherAbbreviationArray[todayNumber];
      temp = temp.firstElementChild;
      document.getElementsByClassName("today")[0].replaceWith(temp);
      
      // convert expanded day to abbreviated day
      var temp2 = document.createElement("div");
      temp2.innerHTML = weatherResultArray[dayNumber];
      temp2 = temp2.firstElementChild;
      thisElement.replaceWith(temp2);

      // change picture
      changeImage(dayNumber);
    }




    // change background image based on day's weather
    function changeImage(dayNumber) {
      if (dayNumber == 0) {
        document.getElementById("mainimage").src = "images/corner.jpg";
      } else if (dayNumber == 1) {
        document.getElementById("mainimage").src = "images/upsidedown.jpg";
      } else {
        document.getElementById("mainimage").src = "images/couch.jpg";
      }

    }



    // hide header when page is scrolled down
    function hideHeader() {
      if (window.pageYOffset >= 400) {
        //header.classList.remove("sticky-top");
        document.getElementById("header").style.top = "-200px";
      } else {
        //header.classList.add("sticky-top");
        document.getElementById("header").style.top = "0px";
      }
    }



    // get and display hourly weather report
    function getWeatherHourly(office, x, y) {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          weatherResultHourly = JSON.parse(this.responseText);
          console.log(weatherResultHourly);

          // print the hourly forecast into the div with the hourlyforecast id
          var hourlyForecastText = document.getElementById("hourlyforecast");
          hourlyForecastText.innerHTML = "<h2>Hour-by-hour forecast</h2>";
          
          // used to format date. used to convert number into string
          const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
          const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

          var dayCount = 0; // keeps track of the number of days printed

          for (i=0; i <weatherResultHourly.properties.periods.length; i++) {
            
            // convert string from json into a proper date
            var startTime = new Date(weatherResultHourly.properties.periods[i].startTime);
            
            console.log(`hourly${i}`);

            // if first loop, create initial div and header
            if (i==0) {
              hourlyForecastText.insertAdjacentHTML("beforeend", `
              <a id="hourly${dayCount}"></a>
              <div class='hourly'>  
                <h3>${days[startTime.getDay()]}, ${months[startTime.getMonth()]} ${startTime.getDate()}, ${startTime.getFullYear()}</h3>
              </div>
              `);
            }

            // create new div and header if the start of a new day
            if (startTime.getHours()==0 && i!==0) {
              dayCount++;
              hourlyForecastText.insertAdjacentHTML("beforeend", `
              <a id="hourly${dayCount}"></a>
              <div class='hourly'>  
                  <h3>${days[startTime.getDay()]}, ${months[startTime.getMonth()]} ${startTime.getDate()}, ${startTime.getFullYear()}</h3>
                </div>
              `);
            }

            // insert text into most recent date's div
            // print formatted time
            if (startTime.getHours()==0) {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
                Time: Midnight 
              `);
            } else if (startTime.getHours() < 12)  {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
                Time: ${startTime.getHours()} a.m. 
              `);
            } else if (startTime.getHours() == 12) {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
                Time: Noon 
              `);
            } else {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
                Time: ${startTime.getHours()-12} p.m. 
              `);
            }

            // print day or night  
            if (weatherResultHourly.properties.periods[i].isDaytime) {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `(day) `);
            } else {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `(night) `);
            }
            
            // print forecast, temperature and wind
            hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
              <b>Forecast:</b> ${weatherResultHourly.properties.periods[i].shortForecast}, 
              <b>Temperature:</b> ${weatherResultHourly.properties.periods[i].temperature}, 
              <b>Wind:</b> ${weatherResultHourly.properties.periods[i].windSpeed} ${weatherResultHourly.properties.periods[i].windDirection} <br>
            `);

          }
        }
      };
      xhttp.open("GET", "https://api.weather.gov/gridpoints/" + office +"/" + x + "," + y + "/forecast/hourly", true);
      xhttp.send();
    }


    
  </script>

</html>
