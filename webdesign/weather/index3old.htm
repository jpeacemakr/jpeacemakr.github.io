<!DOCTYPE html>
<html>
  <head>
    
    <!-- This is a website designed and coded by James Peacemaker Jr.
      It uses Dolly, his dog as a fun way to display the weather.
      It uses three API calls from the National Weather Service.
      https://www.weather.gov/documentation/services-web-api -->


    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Dolly the Doggo's Weather Forecast</title>
    <link href="css/style.css" rel="stylesheet">

    <style>

      a {
        color: rgb(0, 0, 0);
      }
      h2 {
        font-family: 'Rokkitt', sans-serif;
        font-size: 36px;
        color: rgb(255, 123, 0);
      }
      body {
        background-color: #c14b2b;
        background-image: url('images/corner.jpg');
        background-size: cover;
        background-position: bottom left;
        background-attachment: fixed;
      }
      
      #header {
        padding: 0px 0px 0px 0px;
        margin: 0px 0px -2px 0px;
        transition: all 1s;
      }
      #headerhead {
        color: white;
        font-size: 48px;
        font-family: 'Rokkitt', sans-serif;
        margin: 0px 0px -2px 0px;
        padding: 20px 30px 0px 30px;
        background-color: #c14b2b;
      }
      #imagetop {
        width: 100%;
        margin: -2px 0px -2px 0px;
      }
      #imagetopdiv {
        font-size: 1px;
        width: 100%;
        margin: -2px 0px -30px 0px;
      }
      #weatheralert {
        background-color: rgb(255, 123, 0);
        padding: 16px 20px 5px 20px;
        border-radius: 10px;
        position: absolute;
        top: 0px;
        right: 0px;
        margin: 30px;
        z-index: 9;
        cursor: pointer;
        transition: all 1s;
      }
      #weatheralerthead {
        color:#ffffff;
        font-size: 32px;
      }
      #weatheralertbody {
        display: none;
      }
      
      #location {
        margin: -2px 0px -3px 0px;
        padding: 0px 30px 4px 30px;
        background-color: #c14b2b;
      }
      #todayforecast {
        padding:50px;
      }
      #dailyforecast {
        margin: 0px 10px 200px 10px;
        padding: 40px 30px;
      }
      #hourlyforecast {
        background-color: rgb(255, 204, 138);
        margin: 50px;
        padding: 20px 20px 5px 20px;
        border-radius: 10px;
      }
      #footer {
        background-color: #c14b2b;
        margin: 0px;
        padding: 20px;
      }
      

      .today {
        background-color: #fffc67;
        padding: 30px 30px 15px 30px;
        border-radius: 10px;
        margin: 10px;
      }

      .circle {
        background-color: #fffc67;
        width: 80px;
        height: 80px;
        border-radius: 50%;
        text-align: center;
        padding-top:16px; 
        margin: 10px auto -45px auto;
        cursor: pointer;
        font-family: 'Rokkitt', sans-serif;
        font-size: 36px;
        font-weight:bold;
        color: rgb(255, 123, 0);
        position: relative;
        top:-50px;
      }
      .circle:hover {
        background-color: #ffffff;
      }
      .container-fluid {
        padding: 0px;
      }

      .daily {
        background-color: rgba(255,255,255, 0.7);
        margin: 40px 10px 10px 10px;
        padding:10px 20px 1px 20px;
        border-radius: 10px;
        font-size: 14px;
        height:fit-content;
        overflow-wrap: break-word;
      }

      .dollysays {
    
      }

      .hourly{
        background-color: antiquewhite;
        margin:20px 0px;
        padding:20px;
        columns: 620px 2;
      }

     </style>

  </head>



  <body onload="getLocation()" onscroll="hideHeader()">

    <!-- sticky header -->
    <div id="header" class="sticky-top">

      <h1 id="headerhead">Dolly the Doggo's Weather Forecast</h1>
      <div id="location"></div>
      <div id="imagetopdiv">
        <img id="imagetop" src="images/top.svg">
      </div>
    
      <div id="weatheralert" onclick="toggleWeatherAlert()">
        <h2 id="weatheralerthead">Bark! Bark! Bark! (Weather Alert)</h2>
        <div id="weatheralertbody">Wait while I sniff for weather alerts.</div>
      </div>
    
    </div>

    
    <!-- daily forecasts -->
    <div class="container-fluid">
      <div id="dailyforecast" class="row">
      </div>
    </div>
    
    <!-- hourly forecasts -->
    <div id="hourlyforecast"><h2>Bark, world!</h2>
      <p>Just wait a second while I fetch the data from the National Weather Service. 
      <br>Press the "Allow" button if your browser asks if I can know your location.
      <br>This site only works for areas covered by the United States National Weather Service.
      <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>&nbsp;</p>
    </div>

    <div id="footer">
      <p>Copyright 2022, Peacemaker Media Empire. Weather data from <a href ="https://www.weather.gov/documentation/services-web-api">National Weather Service API</a>. If the information on this page is bad, don't blame us. You are the one who got your weather from a dog.</p>
    </div>

  </body>



  <script>
        
    var myLatitude;
    var myLongitude;
    var positionResult;
    var weatherResult;
    var weatherResultHourly;
    var weatherResultArray = [];
    var weatherAbbreviationArray = [];


    // use weather information to get what dolly says
    // position is position of data (0-13) from weather service API. 
    // num is number of positions to include (1 for half day or 2 for full day)
    function dollySays(position, num) {
      
      /* 
      TERMS
      rain = sky drips
      thunderstorms = sky booms
      snow = 
      showers = 
      precipitation = wets
      windy = 
      cloudy = sky fluffs
      thunderstorms = angry sky fluffs
      clear = no sky fluffs
      */

      /* 
      DATA TO USE
      weatherResult.properties.periods[position].name 
      weatherResult.properties.periods[position].shortForecast 
      weatherResult.properties.periods[position].temperature 
      weatherResult.properties.periods[position].windSpeed
      weatherResult.properties.periods[position].windDirection
      weatherResult.properties.periods[position].detailedForecast

      weatherResult.properties.periods[position+1].name 
      weatherResult.properties.periods[position+1].shortForecast 
      weatherResult.properties.periods[position+1].temperature 
      weatherResult.properties.periods[position+1].windSpeed
      weatherResult.properties.periods[position+1].windDirection
      weatherResult.properties.periods[position+1].detailedForecast
      */

      // check the season?
      // check for holiday?


      var dollyWords = "";
      
      
      // level of sunshine
      const clearWords = [
        " It would be good night to chase opossums!", 
        " Maybe I will see the sky ball tonight.",
        " Maybe the raccoon will visit my trash tonight (That's where the no-no food goes)."

      ];
      const sunWords = [
        " It would be good day for a chesseburger party in the backyard.",
        " It will be bright today.",
        " It will be a good day to lie in the sun.",
        " The sun can warm my belly. Not as good as chicken warms my belly, but good enough."

      ];
      const mostSunWords = [
        " There will only be a few sky fluffs in the air today."

      ];
      const partCloudWords = [
        " There will be a lot of sky fluffs in the air today."

      ];
      const cloudWords = [
        " The sky fluffs will fill the air today."

      ];

      // temperature
      const hotWords = [
        " It is so hot. Bring water bowl on your walk .",
        " Keep paws off the outdoor floor so they don't get burned.",
        " Can I has trip to the pool too?",
        " Would be good day for ice creams. Peanut butter is my favorite!",
        " When I go outside, I has the pants!"

      ];
      const coldWords = [
        " It is so cold I need my extra fur today.",
        " It is cold, but nice hot chicken could keep me warm."

      ];
      
      // precipitation
      const chanceRainWords = [ 
        " The sky fluffs are drooling today.", 
        " I brings in the mud from the walk.",
        " It might be a good day for couch cuddles.",
        " Bath time is outside now."

      ];
      const rainWords = [ 
        " The sky fluffs are drooling today.", 
        " I brings in the mud from the walk.",
        " It might be a good day for couch cuddles.",
        " Bath time is outside now."

      ];
      const stormWords = [
        " Try not to get scared by the sky booms!",
        " The sky fluffs will be angry today!"

      ];
      const chanceStormWords = [
        " The sky fluffs might get angry today."

      ];
      const snowWords = [
        "Good time for couch snuggles."

      ];
      const chanceSnowWords = [
        "Good time for couch snuggles."

      ];
      
      // wind
      const windWords = [
        " The sky fluffs will be running fast today.", 
        " Be careful which way you pees today."

      ];
      
      // perfect weather
      const perfectWords = [
        " It is a great day for lots of walks!"

      ];
      
      
      // how to call random words >> randomWords(windWords);
      function randomWords (wordsArray) {
        return ( wordsArray [ Math.floor ( Math.random() * wordsArray.length ) ] );
      }


      // level of sunshine
      // If clear
      if (weatherResult.properties.periods[position].shortForecast.startsWith("Clear")) {
          dollyWords += randomWords(clearWords);
      }
      // If mostly clear
      if (weatherResult.properties.periods[position].shortForecast.startsWith("Mostly Clear")) {
          dollyWords += randomWords(clearWords);
      }
      // If partly clear
      if (weatherResult.properties.periods[position].shortForecast.startsWith("Partly Clear")) {
          dollyWords += randomWords(clearWords);
      }
      // if sunny
      else if (weatherResult.properties.periods[position].shortForecast.startsWith("Sunny")) {
        dollyWords += randomWords(sunWords);  
      }
      // if mostly sunny
      else if (weatherResult.properties.periods[position].shortForecast.startsWith("Mostly Sunny")) {
        dollyWords += randomWords(mostSunWords);  
      }
      
      // if partly sunny
      else if (weatherResult.properties.periods[position].shortForecast.startsWith("Partly Sunny")) {
        dollyWords += randomWords(partCloudWords);  
      }
      // if partly cloudy
      else if (weatherResult.properties.periods[position].shortForecast.startsWith("Partly Cloudy")) {
        dollyWords += randomWords(partCloudWords);  
      }
      // if mostly cloudy
      else if (weatherResult.properties.periods[position].shortForecast.startsWith("Mostly Cloudy")) {
        dollyWords += randomWords(partCloudWords);  
      }
      // if cloudy
      else if (weatherResult.properties.periods[position].shortForecast.startsWith("Cloudy")) {
        dollyWords += randomWords(cloudWords);  
      }

      // temperature
      if (weatherResult.properties.periods[position].temperature <= 32) {
        dollyWords += randomWords(coldWords);  
      } else if (weatherResult.properties.periods[position].temperature >= 90) {
        dollyWords += randomWords(hotWords);  
      }


      // precipitation
      // chance
      if (weatherResult.properties.periods[position].detailedForecast.includes("chance")) {

        if (weatherResult.properties.periods[position].detailedForecast.includes("showers")) {
          dollyWords += randomWords(chanceRainWords);
        }
        if (weatherResult.properties.periods[position].detailedForecast.includes("thunderstorms")) {
            dollyWords += randomWords(chanceStormWords);
        }
        if (weatherResult.properties.periods[position].detailedForecast.includes("snow")) {
            dollyWords += randomWords(chanceSnowWords);
        }
      // full on
      } else {
        if (weatherResult.properties.periods[position].detailedForecast.includes("showers")) {
          dollyWords += randomWords(rainWords);
        }
        if (weatherResult.properties.periods[position].detailedForecast.includes("thunderstorms")) {
            dollyWords += randomWords(stormWords);
        }
        if (weatherResult.properties.periods[position].detailedForecast.includes("snow")) {
            dollyWords += randomWords(snowWords);
        }
      }
      
      // if windy
      if (weatherResult.properties.periods[position].windSpeed >= 10) {
        dollyWords += randomWords(windWords);  
      }

      return dollyWords;
    }




    // get latitude and longitude from browser
    function getLocation() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(getWeatherPosition); //takes showPosition as callback function and returns position
      } else {
        document.getElementById("location").innerHTML = "Geolocation is not supported by this browser.";
      }
    }



    
    // look up weather zone and grid position within the zone. also gets city and state.
    function getWeatherPosition(position) {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          positionResult = JSON.parse(this.responseText);
          
          document.getElementById("location").innerHTML = 
            "<p>Location: <b>" + positionResult.properties.relativeLocation.properties.city + ", " + 
            positionResult.properties.relativeLocation.properties.state +
            "</b> (Latitude: " + position.coords.latitude + ", Longitude: " + position.coords.longitude +
            ")</p>"           
          ;
          
          loadWeather(positionResult.properties.gridId, positionResult.properties.gridX, positionResult.properties.gridY);
          getWeatherHourly(positionResult.properties.gridId, positionResult.properties.gridX, positionResult.properties.gridY);
          getWeatherAlert(position.coords.latitude, position.coords.longitude);
        }
      };
      xhttp.open("GET", "https://api.weather.gov/points/" + position.coords.latitude + "," + position.coords.longitude, true);
      xhttp.send();
    }




    // get and display daily weather report
    // it fetches data (positions 0-13) from weather service API
    // it then adds them to two arrays. one for expanded forecasts. one for abbreviated forecasts
    function loadWeather(office, x, y) {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          weatherResult = JSON.parse(this.responseText);         
          console.log(weatherResult);

          // store today's forecast into the array
          // if already passed noon, need to make first day just tonight (half day)
          var dayStart = 0; // 1 if positions start with a half-day forecast. Otherwise 0.
          var hourlyDayCount = 0; // used to build links to hourly forecasts
          
          // if starting with a half day
          if (weatherResult.properties.periods[0].name == "Tonight" || weatherResult.properties.periods[0].name == "Overnight") {
            
            weatherResultArray.push (`
              <div id="full0" class="today col-xl-3 col-md-5">
                <h2> ${weatherResult.properties.periods[0].name}</h2> 
                <p><b>Forecast:</b> ${weatherResult.properties.periods[0].shortForecast}, 
                <b>Temperature:</b> ${weatherResult.properties.periods[0].temperature}, 
                <b>Wind:</b> ${weatherResult.properties.periods[0].windSpeed} ${weatherResult.properties.periods[0].windDirection}
                <br> ${weatherResult.properties.periods[0].detailedForecast}</p>

                <div class="dollysays">
                  <h2>Dolly says</h2> 
                  <p>${dollySays(0, 1)}</p>
                </div>

                <p><a href="#hourly${hourlyDayCount}">Hour-by-hour walk forecast</a></p>
              </div>
            `);

            weatherAbbreviationArray.push (`
                <div id="abbreviated0" class='daily col' onclick="changeForecast(0, this);">
                  <div class="circle">
                    Now
                  </div> 
                  <p><b> ${weatherResult.properties.periods[0].name}</b> 
                  <br>${weatherResult.properties.periods[0].shortForecast}
                  <br>${weatherResult.properties.periods[0].temperature}F</p> 
                </div>
            `);
            dayStart = 1;
            if (weatherResult.properties.periods[0].name !== "Overnight") {
              hourlyDayCount = 1;
            }
          }

          var currentDayAbbreviation;
          var currentDayArray; // used to split holiday names so we can get the first letters for an abbreviation. example Memorial Day abbreviation is MD
          
          //add rest of the full days into the array
          for (i=dayStart; i < weatherResult.properties.periods.length; i=i+2) {          
            
            
            // create abbreviation of the day of the week
            currentDayAbbreviation = "";
            if (weatherResult.properties.periods[i].name == "Today" || weatherResult.properties.periods[i].name == "This Afternoon") {
              currentDayAbbreviation ="Now";
            }
            //if current day has a space (is a special holiday), get first letter then each letter after the space
            else if (weatherResult.properties.periods[i].name.includes(" ")){
              currentDayArray = weatherResult.properties.periods[i].name.split(" ");
              function getFirstLetters(item) {
                currentDayAbbreviation = currentDayAbbreviation + item.slice(0, 1);
              }
              currentDayArray.forEach(getFirstLetters);
            }
            // else just use the first two letters of the day of the week
            else{
              currentDayAbbreviation = weatherResult.properties.periods[i].name.slice(0, 2);
            }
            
                        
            // if full day (has a morning and evening)
            if (i+1 < weatherResult.properties.periods.length) {

              // add full day to weather results array
              weatherResultArray.push (`
                <div id="full${weatherResultArray.length}" class="today col-xl-3 col-md-5">
                  <h2> ${weatherResult.properties.periods[i].name}</h2> 
                  <p><b>Forecast:</b> ${weatherResult.properties.periods[i].shortForecast}, 
                  <b>Temperature:</b> ${weatherResult.properties.periods[i].temperature}, 
                  <b>Wind:</b> ${weatherResult.properties.periods[i].windSpeed} ${weatherResult.properties.periods[i].windDirection}
                  <br> ${weatherResult.properties.periods[i].detailedForecast}</p>

                  <h2> ${weatherResult.properties.periods[i+1].name}</h2> 
                  <p><b>Forecast:</b> ${weatherResult.properties.periods[i+1].shortForecast}, 
                  <b>Temperature:</b> ${weatherResult.properties.periods[i+1].temperature}, 
                  <b>Wind:</b> ${weatherResult.properties.periods[i+1].windSpeed} ${weatherResult.properties.periods[i+1].windDirection}
                  <br> ${weatherResult.properties.periods[i+1].detailedForecast}</p>

                  <div class="dollysays">
                    <h2>Dolly says</h2> 
                    <p>${dollySays(i, 2)}</p>
                  </div>

                  <p><a href="#hourly${hourlyDayCount}">Hour-by-hour walk forecast</a></p>

                </div>
              `);
              
              // add full day to weather abbreviations array
              weatherAbbreviationArray.push (`
                <div id="abbreviated${weatherAbbreviationArray.length}" class='daily col' onclick="changeForecast(${weatherResultArray.length-1}, this);">
                  <div class="circle">
                    ${currentDayAbbreviation}
                  </div> 
                  <p><b>${weatherResult.properties.periods[i].name}</b> 
                  <br>${weatherResult.properties.periods[i].shortForecast}
                  <br>${weatherResult.properties.periods[i].temperature}F, 
                  ${weatherResult.properties.periods[i+1].temperature}F</p> 
                </div>
              `);


            // else add half day to weather results array
            } else {
              weatherResultArray.push (`
                <div id="full${weatherResultArray.length}" class="today col-xl-3 col-md-5">
                  <h2> ${weatherResult.properties.periods[i].name}</h2> 
                  <p><b>Forecast:</b> ${weatherResult.properties.periods[i].shortForecast}, 
                  <b>Temperature:</b> ${weatherResult.properties.periods[i].temperature}, 
                  <b>Wind:</b> ${weatherResult.properties.periods[i].windSpeed} ${weatherResult.properties.periods[i].windDirection}
                  <br> ${weatherResult.properties.periods[i].detailedForecast}</p>

                  <div class="dollysays">
                    <h2>Dolly says</h2> 
                    <p>${dollySays(i, 1)}</p>
                  </div>

                  <p><a href="#hourly${hourlyDayCount}">Hour-by-hour walk forecast</a></p>

                </div>
              `);

              weatherAbbreviationArray.push (`
                <div id="abbreviated${weatherAbbreviationArray.length}" class='daily col' onclick="changeForecast(${weatherResultArray.length-1}, this);">
                  <div class="circle">
                    ${currentDayAbbreviation}
                  </div> 
                  <p><b>${weatherResult.properties.periods[i].name}</b> 
                  <br>${weatherResult.properties.periods[i].shortForecast}
                  <br>${weatherResult.properties.periods[i].temperature}F</p> 
                </div>
              `);

            }
            hourlyDayCount++;
          }
      
          // print today's expanded forecast into the div with the today id
          var dailyForecastText = document.getElementById("dailyforecast");
          dailyForecastText.insertAdjacentHTML("beforeend", weatherResultArray[0]);           

          // print the rest of the abbreviated daily forecasts into the div with the dailyforecast id
          for (i=1; i < weatherResultArray.length; i++) {          
              dailyForecastText.insertAdjacentHTML("beforeend", weatherAbbreviationArray[i]);           
          }
        }
      
      };
      xhttp.open("GET", "https://api.weather.gov/gridpoints/" + office +"/" + x + "," + y + "/forecast", true);
      xhttp.send();
    }




    // swap expanded and abbreviated forecasts. used to pop out forecast with onclick event
    function changeForecast(dayNumber, thisElement) {
      // convert expanded day to abbreviated day
      var temp = document.createElement("div");
      var todayNumber = document.getElementsByClassName("today")[0].id.charAt(4); //gets number from id full0 ... full8
      temp.innerHTML = weatherAbbreviationArray[todayNumber];
      temp = temp.firstElementChild;
      document.getElementsByClassName("today")[0].replaceWith(temp);
      
      // convert expanded day to abbreviated day
      var temp2 = document.createElement("div");
      temp2.innerHTML = weatherResultArray[dayNumber];
      temp2 = temp2.firstElementChild;
      thisElement.replaceWith(temp2);

      // change picture
      changeImage(dayNumber);
    }




    // change background image based on day's weather
    // needs work
    function changeImage(dayNumber) {
      if (dayNumber == 0) {
        document.body.style.backgroundImage = "url('images/corner.jpg')";
        document.body.style.backgroundPosition = "bottom left"
      } else if (dayNumber == 1) {
        document.body.style.backgroundImage = "url('images/upsidedown.jpg')";
        document.body.style.backgroundPosition = "top center"
      } else {
        document.body.style.backgroundImage = "url('images/couch.jpg')";
        document.body.style.backgroundPosition = "bottom center"
      }
    }



    // hide header when page is scrolled down
    function hideHeader() {
      if (window.pageYOffset >= 400) {
        document.getElementById("header").style.top = "-400px";
      } else {
        document.getElementById("header").style.top = "0px";
      }
    }



    // get and display hourly weather report
    function getWeatherHourly(office, x, y) {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          weatherResultHourly = JSON.parse(this.responseText);
          console.log(weatherResultHourly);

          // print the hourly forecast into the div with the hourlyforecast id
          var hourlyForecastText = document.getElementById("hourlyforecast");
          hourlyForecastText.innerHTML = "<h2>Hour-by-hour walk forecast</h2><p>(<b>Ideal walking weather:</b> 6 a.m. to 8 p.m. 40 to 89 degrees and no precipitation.)</p>";
          
          // used to format date. used to convert number into string
          const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
          const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

          var dayCount = 0; // keeps track of the number of days printed

          for (i=0; i <weatherResultHourly.properties.periods.length; i++) {
            
            // convert string from json into a proper date
            var startTime = new Date(weatherResultHourly.properties.periods[i].startTime);
            
            // if first loop, create initial div and header
            if (i==0) {
              hourlyForecastText.insertAdjacentHTML("beforeend", `
              <a id="hourly${dayCount}"></a>
              <div class='hourly'>  
                <h3>${days[startTime.getDay()]}, ${months[startTime.getMonth()]} ${startTime.getDate()}, ${startTime.getFullYear()}</h3>
              </div>
              `);
            }

            // create new div and header if the start of a new day
            if (startTime.getHours()==0 && i!==0) {
              dayCount++;
              hourlyForecastText.insertAdjacentHTML("beforeend", `
              <a id="hourly${dayCount}"></a>
              <div class='hourly'>  
                  <h3>${days[startTime.getDay()]}, ${months[startTime.getMonth()]} ${startTime.getDate()}, ${startTime.getFullYear()}</h3>
                </div>
              `);
            }

            // insert text into most recent date's div
            // print formatted time
            if (startTime.getHours()==0) {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
                <b>Midnight, </b>
              `);
            } else if (startTime.getHours() < 12)  {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
                <b>${startTime.getHours()} a.m., </b> 
              `);
            } else if (startTime.getHours() == 12) {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
                <b>Noon, </b>
              `);
            } else {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
                <b>${startTime.getHours()-12} p.m., </b>
              `);
            }

            // print forecast, temperature and wind
            hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
              ${weatherResultHourly.properties.periods[i].shortForecast}, 
              ${weatherResultHourly.properties.periods[i].temperature}F, 
              wind ${weatherResultHourly.properties.periods[i].windSpeed} ${weatherResultHourly.properties.periods[i].windDirection} 
            `);

            // is good for walk?
            if (weatherResultHourly.properties.periods[i].temperature >= 40 && weatherResultHourly.properties.periods[i].temperature < 90 &&
                startTime.getHours() >= 6 && startTime.getHours() <= 20 && 
                (weatherResultHourly.properties.periods[i].shortForecast == "Sunny" || 
                weatherResultHourly.properties.periods[i].shortForecast == "Mostly Sunny" ||
                weatherResultHourly.properties.periods[i].shortForecast == "Partly Sunny" ||
                weatherResultHourly.properties.periods[i].shortForecast == "Partly Cloudy" ||
                weatherResultHourly.properties.periods[i].shortForecast == "Mostly Cloudy" ||
                weatherResultHourly.properties.periods[i].shortForecast == "Cloudy" || 
                weatherResultHourly.properties.periods[i].shortForecast == "Clear" || 
                weatherResultHourly.properties.periods[i].shortForecast == "Mostly Clear" || 
                weatherResultHourly.properties.periods[i].shortForecast == "Partly Clear")) {
              hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
              <b><span style="color:red">(WALK)</span></b> 
            `);
            }

            hourlyForecastText.lastElementChild.insertAdjacentHTML("beforeend", `
              <br>
            `);

          }
        }
      };
      xhttp.open("GET", "https://api.weather.gov/gridpoints/" + office +"/" + x + "," + y + "/forecast/hourly", true);
      xhttp.send();
    }





    // get and display weather alerts
    // example api call: https://api.weather.gov/alerts/active?point=37.52985065563401,-77.41054289211888
    function getWeatherAlert(latitude, longitude) {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          
          weatherAlert = JSON.parse(this.responseText);
          console.log(weatherAlert);

          // print the hourly forecast into the div with the hourlyforecast id
          var alertText = document.getElementById("weatheralertbody");

          // checks to see if alerts exist
          if (weatherAlert.features.length==0){
            alertText.innerHTML = `
              <p>There are no active weather alerts for your location. </p>
            `;
          
          // loop through alerts
          } else {

            alertText.innerHTML = "";
            for (i=0; i<weatherAlert.features.length; i++) {
              alertText.insertAdjacentHTML("beforeend", `
                  <p>${weatherAlert.features[i].properties.event} 
                  ${weatherAlert.features[i].properties.headline} 
                  ${weatherAlert.features[i].properties.description}
                  ${weatherAlert.features[i].properties.instruction}</p>
              `);
            }
          }
        }
      };
      xhttp.open("GET", `https://api.weather.gov/alerts/active?point=${latitude},${longitude}`, true);
      xhttp.send();
    }




    // toggles the display of weatheralertsbody when used with onclick event
    function toggleWeatherAlert() {
      var alertBody = document.getElementById("weatheralertbody");
      console.log(alertBody.style);
      
      if (alertBody.style.display === "block") {
        alertBody.style.display = "none";
      } else {
        alertBody.style.display = "block";
      }
    }


    
  </script>

</html>